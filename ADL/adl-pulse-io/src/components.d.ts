/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  AvatarType,
  CardStyles,
  Color,
  ColorVariant,
  Elevation,
  Fill,
  GridBreakpoints,
  LogoTypes,
  Mode,
  Position,
  PulseOnBoardingItem,
  PulseTooltipInfoData,
  Size,
  SizeModal,
  StateInput,
  SwitchType,
  TextAlign,
  TextFieldTypes,
} from './interface';
import {
  PulseMenuData,
  PulseOptionMenuData,
} from './components/pulse-atm/option-menu-controller/pulse-option-menu-controller';
import {
  TagData,
} from './components/pulse-mol/tags-group/pulse-tags-group';
import {
  VoucherBody,
  VoucherControls,
  VoucherHeader,
  VoucherModel,
  VoucherState,
} from './models/pulse-voucher.model';

export namespace Components {
  interface PulseAvatar {
    'avatartype': AvatarType;
    'borderdashed': boolean;
    'color': Color;
    'colorvariant': ColorVariant;
    'icon': string;
    'iconcolor': Color;
    'iconcolorvariant': ColorVariant;
    'logo': LogoTypes;
    'name': string;
    'size': Size;
    'text': string;
    'url': string;
  }
  interface PulseButton {
    'block': boolean;
    'color': Color;
    'colorgradient': boolean;
    'colorvariant': ColorVariant;
    'disabled': boolean;
    'fill': Fill;
    'icon': string;
    'iconColor': Color;
    'iconColorVariant': ColorVariant;
    'iconPosition': 'left' | 'right';
    'pulseButtonSize': 'default' | 'small';
    'pulseButtonType': 'primary' | 'secondary' | 'tertiary';
    'type': 'submit' | 'reset' | 'button';
  }
  interface PulseCalendar {
    'color': Color;
    'maxDate'?: Date;
    'minDate'?: Date;
    'range'?: boolean;
    'value'?: Array<Date>;
  }
  interface PulseCard {
    'color': Color;
    'colorgradient': boolean;
    'colorvariant': ColorVariant;
    'elevation': Elevation;
    'elevationhover': Elevation;
    'recalculate': () => Promise<void>;
  }
  interface PulseCardShortcutAdd {
    'mode': Mode;
    'text': string;
  }
  interface PulseCheckbox {
    'checked': boolean;
    'color': Color;
    'colorgradient': boolean;
    'colorvariant': ColorVariant;
    'disabled': boolean;
    'name': string;
    'value': string;
  }
  interface PulseCollapsible {
    'carousel': boolean;
    'description': string;
    'disabled': boolean;
    'name': string;
    'scrollsize': number;
    'separator': boolean;
    'tagcolor': Color;
    'tagcolorvariant': ColorVariant;
    'tagtext': string;
  }
  interface PulseDatePicker {
    'color'?: Color;
    'disabled'?: boolean;
    'endlabel'?: string;
    'maxDate'?: Date;
    'minDate'?: Date;
    'range'?: boolean;
    'startlabel'?: string;
    'value': Array<Date>;
  }
  interface PulseDropdown {
    'disabled': boolean;
    'ellipsis': boolean;
    'insideelement': boolean;
    'label': string;
    'name': string;
    'placeholder': string;
    'text': string;
    'value': string;
  }
  interface PulseFabButton {
    'color': Color;
    'colorgradient': boolean;
    'colorvariant': ColorVariant;
    'disabled': boolean;
    'text': string;
    'textposition': 'bottom' | 'right';
    'type': 'submit' | 'reset' | 'button';
  }
  interface PulseFlowThc {}
  interface PulseFlowth {
    'elevation': Elevation;
    'showLeft': boolean;
    'showRight': boolean;
  }
  interface PulseFlowthc {}
  interface PulseFlowthcs {
    'lgcontentsize': number;
  }
  interface PulseFlowtm {}
  interface PulseFlowtr {}
  interface PulseFlowtt {}
  interface PulseIcon {
    'color': Color;
    'colorvariant': ColorVariant;
    'getIconsNames': () => Promise<string[]>;
    'icon': string;
    'name': string;
    'size': Size;
  }
  interface PulseInput {
    'actionableicon': boolean;
    'autocomplete': 'on' | 'off';
    'autofocus': boolean;
    'blocked': boolean;
    'disabled': boolean;
    'hasdecimals': boolean;
    'icon': string;
    'iconcolor': Color;
    'iconcolorvariant': ColorVariant;
    'inputmode': string;
    'inputtextalign': TextAlign;
    'label': string;
    'labelerror': string;
    'lefticon': boolean;
    'max': string;
    'maxlength': number;
    'min': string;
    'minlength': number;
    'name': string;
    'optional': boolean;
    'pattern': string;
    'placeholder': string;
    'readonly': boolean;
    'required': boolean;
    'spellcheck': boolean;
    'state': StateInput;
    'step': string;
    'type': TextFieldTypes;
    'value': string | null;
  }
  interface PulseItem {
    'alwaysDescription': boolean;
    'description'?: string | string[];
    'fullContentDesktop': boolean;
    'fullContentMobile': boolean;
    'fullContentTablet': boolean;
    'hasExpand': boolean;
    'lines': boolean;
    'openExpand': boolean;
  }
  interface PulseList {
    'reduceAllItems': () => Promise<void>;
  }
  interface PulseListGroup {
    'isaccordion'?: boolean;
    'islitedesign'?: boolean;
    'showheader'?: boolean;
  }
  interface PulseListItem {
    'additionalsubtitle': string;
    'additionalsubtitledesc'?: string;
    'avataraligncenter': boolean;
    'avatarpath': string;
    'avatartype': AvatarType;
    'collapseItem': (collapse: boolean) => Promise<void>;
    'description'?: string;
    'descriptionexpanded'?: string;
    'fillnavbuttton'?: 'clear' | 'solid';
    'isdisabled'?: boolean;
    'isexpanded'?: boolean;
    'isexpandible'?: boolean;
    'itemid': string;
    'itemtitle': string;
    'primarynavicon'?: string;
    'primarynaviconcolor'?: Color;
    'secondaryicon'?: string;
    'secondaryiconcolor'?: Color;
    'showdivisor'?: boolean;
    'subtitle': string;
    'subtitledesc'?: string;
    'tagcolor'?: Color;
    'tagtext'?: string;
  }
  interface PulseMobileCalendar {
    'color': Color;
    'currentDate': Date;
    'maxdate'?: Date;
    'mindate'?: Date;
    'selecteddays'?: Array<Date>;
    'showmonthtitle'?: boolean;
  }
  interface PulseMobileCalendarGroup {
    'color': Color;
    'height': string;
    'maxdate'?: Date;
    'mindate'?: Date;
    'monthsrenderrange': number;
    'range'?: boolean;
    'value'?: Array<Date>;
  }
  interface PulseMobileDatePicker {
    'color': Color;
    'endlabel'?: string;
    'maxdate'?: Date;
    'mindate'?: Date;
    'monthsrenderrange': number;
    'range'?: boolean;
    'startlabel'?: string;
  }
  interface PulseModal {
    'component': any;
    'componentProps'?: any;
    'delegate': any;
    'dismiss': (data?: any) => Promise<boolean>;
    'onWillDismiss': () => Promise<any>;
    'present': () => Promise<void>;
    'size': SizeModal;
  }
  interface PulseModalLite {
    'dismiss': (data?: any) => Promise<boolean>;
    'onWillDismiss': () => Promise<any>;
    'size': SizeModal;
  }
  interface PulseModaltb {}
  interface PulseModaltc {
    'title': string;
  }
  interface PulseNavButton {
    'disabled': boolean;
    'fill': 'clear' | 'solid';
    'icon': string;
    'iconPosition': 'left' | 'right';
    'iconcolor'?: Color;
    'onlyIconDevice': GridBreakpoints | GridBreakpoints[] | string;
  }
  interface PulseOnboarding {
    'data': Array<PulseOnBoardingItem>;
  }
  interface PulseOption {
    'color'?: Color;
    'colorvariant'?: ColorVariant;
    'disabled': boolean;
    'icon'?: string;
    'name': string;
    'showIcon'?: boolean;
    'value': string;
  }
  interface PulseOptionMenu {
    'data': any[];
    'height': string;
    'htmlelementref': HTMLElement;
    'name': string;
    'orientation': Position;
    'recalculate': () => Promise<void>;
    'show': boolean;
    'size': Size;
    'value': any;
  }
  interface PulseOptionMenuController {
    'dismiss': <T>(id: any) => Promise<T>;
    'present': <T>(properties: PulseMenuData) => Promise<T>;
  }
  interface PulseProgressIndicator {
    'color': Color;
    'colorvariant': ColorVariant;
    'stepactive': number;
    'steps': number;
  }
  interface PulseRadio {
    'checked': boolean;
    'color': Color;
    'colorgradient': boolean;
    'colorvariant': ColorVariant;
    'disabled': boolean;
    'label': string;
    'name': string;
    'value'?: any | null;
  }
  interface PulseRadioGroup {
    /**
    * If `true`, the radios can be deselected.
    */
    'allowEmptySelection': boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name': string;
    /**
    * the value of the radio group.
    */
    'value'?: any | null;
  }
  interface PulseSelectCard {
    'disabled': boolean;
    'selected': boolean;
    'switchtype': SwitchType;
    'value'?: any | null;
  }
  interface PulseSelectCardGroup {
    'allowEmptySelection': boolean;
    'groupstyle': CardStyles;
    'isScrollBegin': () => Promise<boolean>;
    'isScrollable': () => Promise<boolean>;
    'moveBackwards': () => Promise<void>;
    'moveForward': () => Promise<void>;
    'position': any;
    'value'?: any | null;
  }
  interface PulseSlide {}
  interface PulseSlides {
    /**
    * The color to use from your application's color palette to base. For more information on colors, see [theming](https://pulseio.design).
    */
    'color': Color;
    /**
    * The color hue to use from your application's based in colors. For more information on colors, see [theming](https://pulseio.design).
    */
    'colorvariant': ColorVariant;
  }
  interface PulseSwitchButton {
    'changeStateSwitch': () => Promise<void>;
    'color': Color;
    'colorgradient': boolean;
    'colorvariant': ColorVariant;
    'inputstate': boolean;
  }
  interface PulseTab {
    'color': Color;
    'colorgradient': boolean;
    'colorvariant': ColorVariant;
    'disabled': boolean;
    'selected': boolean;
    'tabtext': string;
    'value'?: any | null;
  }
  interface PulseTabItem {
    'disabled': boolean;
    'tabtext': string;
  }
  interface PulseTabs {
    'allowEmptySelection': boolean;
    'value'?: any | null;
  }
  interface PulseTabsGroup {
    'intrinsic': boolean;
  }
  interface PulseTag {
    'closeable': boolean;
    'color': Color;
    'colorvariant': ColorVariant;
    'disabled': boolean;
    'fill': Fill;
    'maxwidth'?: number;
    'size': Size;
    'skeleton': boolean;
    'stayalways': boolean;
    'text': string;
  }
  interface PulseTagsGroup {
    'closeable': boolean;
    'color': Color;
    'colorvariant': ColorVariant;
    'fill': Fill;
    'size': Size;
    'tagdata': TagData[];
    'text': string;
  }
  interface PulseToast {
    'closeable': boolean;
    'color': Color;
    'colorvariant': ColorVariant;
    'elevation': Elevation;
    'image': string;
    'text': string;
    'time': number;
  }
  interface PulseTooltip {
    'color': Color;
    'colorgradient': boolean;
    'colorvariant': ColorVariant;
    'description': string;
    'dismiss': () => Promise<void>;
    'elevation': Elevation;
    'mobileView': boolean;
    'objectdest': string;
    'objectdesthtml': HTMLElement;
    'position': Position;
    'recalculate': () => Promise<void>;
    'size': Size;
    'tiptitle': string;
  }
  interface PulseTooltipController {
    'dismiss': <T>(id: any) => Promise<T>;
    'present': <T>(properties: any) => Promise<T>;
  }
  interface PulseTooltipInfo {
    'color': Color;
    'colorvariant': ColorVariant;
    'content': Array<PulseTooltipInfoData>;
    'dismiss': () => Promise<void>;
    'dynamicposition': boolean;
    'htmlelementref': HTMLElement;
    'mobilebehavior': boolean;
    'orientation': Position;
    'recalculate': () => Promise<void>;
    'removeinclose': boolean;
    'size': Size;
  }
  interface PulseTooltipInfoController {
    'dismiss': <T>(id: any) => Promise<T>;
    'present': <T>(properties: any) => Promise<T>;
  }
  interface PulseTransaction {
    'voucherdata': VoucherModel;
  }
  interface PulseVoucher {}
  interface PulseVoucherResult {
    'state'?: VoucherState;
    'voucherControls': VoucherControls;
    'voucherHeader': VoucherHeader;
  }
  interface PulseVoucherSummary {
    'state'?: VoucherState;
    'voucherBody': VoucherBody;
    'voucherControls': VoucherControls;
  }
  interface PulseVoucherSummaryItem {
    'hideborder'?: boolean;
    'state'?: VoucherState;
    'titlename': string;
  }
}

declare global {


  interface HTMLPulseAvatarElement extends Components.PulseAvatar, HTMLStencilElement {}
  var HTMLPulseAvatarElement: {
    prototype: HTMLPulseAvatarElement;
    new (): HTMLPulseAvatarElement;
  };

  interface HTMLPulseButtonElement extends Components.PulseButton, HTMLStencilElement {}
  var HTMLPulseButtonElement: {
    prototype: HTMLPulseButtonElement;
    new (): HTMLPulseButtonElement;
  };

  interface HTMLPulseCalendarElement extends Components.PulseCalendar, HTMLStencilElement {}
  var HTMLPulseCalendarElement: {
    prototype: HTMLPulseCalendarElement;
    new (): HTMLPulseCalendarElement;
  };

  interface HTMLPulseCardElement extends Components.PulseCard, HTMLStencilElement {}
  var HTMLPulseCardElement: {
    prototype: HTMLPulseCardElement;
    new (): HTMLPulseCardElement;
  };

  interface HTMLPulseCardShortcutAddElement extends Components.PulseCardShortcutAdd, HTMLStencilElement {}
  var HTMLPulseCardShortcutAddElement: {
    prototype: HTMLPulseCardShortcutAddElement;
    new (): HTMLPulseCardShortcutAddElement;
  };

  interface HTMLPulseCheckboxElement extends Components.PulseCheckbox, HTMLStencilElement {}
  var HTMLPulseCheckboxElement: {
    prototype: HTMLPulseCheckboxElement;
    new (): HTMLPulseCheckboxElement;
  };

  interface HTMLPulseCollapsibleElement extends Components.PulseCollapsible, HTMLStencilElement {}
  var HTMLPulseCollapsibleElement: {
    prototype: HTMLPulseCollapsibleElement;
    new (): HTMLPulseCollapsibleElement;
  };

  interface HTMLPulseDatePickerElement extends Components.PulseDatePicker, HTMLStencilElement {}
  var HTMLPulseDatePickerElement: {
    prototype: HTMLPulseDatePickerElement;
    new (): HTMLPulseDatePickerElement;
  };

  interface HTMLPulseDropdownElement extends Components.PulseDropdown, HTMLStencilElement {}
  var HTMLPulseDropdownElement: {
    prototype: HTMLPulseDropdownElement;
    new (): HTMLPulseDropdownElement;
  };

  interface HTMLPulseFabButtonElement extends Components.PulseFabButton, HTMLStencilElement {}
  var HTMLPulseFabButtonElement: {
    prototype: HTMLPulseFabButtonElement;
    new (): HTMLPulseFabButtonElement;
  };

  interface HTMLPulseFlowThcElement extends Components.PulseFlowThc, HTMLStencilElement {}
  var HTMLPulseFlowThcElement: {
    prototype: HTMLPulseFlowThcElement;
    new (): HTMLPulseFlowThcElement;
  };

  interface HTMLPulseFlowthElement extends Components.PulseFlowth, HTMLStencilElement {}
  var HTMLPulseFlowthElement: {
    prototype: HTMLPulseFlowthElement;
    new (): HTMLPulseFlowthElement;
  };

  interface HTMLPulseFlowthcElement extends Components.PulseFlowthc, HTMLStencilElement {}
  var HTMLPulseFlowthcElement: {
    prototype: HTMLPulseFlowthcElement;
    new (): HTMLPulseFlowthcElement;
  };

  interface HTMLPulseFlowthcsElement extends Components.PulseFlowthcs, HTMLStencilElement {}
  var HTMLPulseFlowthcsElement: {
    prototype: HTMLPulseFlowthcsElement;
    new (): HTMLPulseFlowthcsElement;
  };

  interface HTMLPulseFlowtmElement extends Components.PulseFlowtm, HTMLStencilElement {}
  var HTMLPulseFlowtmElement: {
    prototype: HTMLPulseFlowtmElement;
    new (): HTMLPulseFlowtmElement;
  };

  interface HTMLPulseFlowtrElement extends Components.PulseFlowtr, HTMLStencilElement {}
  var HTMLPulseFlowtrElement: {
    prototype: HTMLPulseFlowtrElement;
    new (): HTMLPulseFlowtrElement;
  };

  interface HTMLPulseFlowttElement extends Components.PulseFlowtt, HTMLStencilElement {}
  var HTMLPulseFlowttElement: {
    prototype: HTMLPulseFlowttElement;
    new (): HTMLPulseFlowttElement;
  };

  interface HTMLPulseIconElement extends Components.PulseIcon, HTMLStencilElement {}
  var HTMLPulseIconElement: {
    prototype: HTMLPulseIconElement;
    new (): HTMLPulseIconElement;
  };

  interface HTMLPulseInputElement extends Components.PulseInput, HTMLStencilElement {}
  var HTMLPulseInputElement: {
    prototype: HTMLPulseInputElement;
    new (): HTMLPulseInputElement;
  };

  interface HTMLPulseItemElement extends Components.PulseItem, HTMLStencilElement {}
  var HTMLPulseItemElement: {
    prototype: HTMLPulseItemElement;
    new (): HTMLPulseItemElement;
  };

  interface HTMLPulseListElement extends Components.PulseList, HTMLStencilElement {}
  var HTMLPulseListElement: {
    prototype: HTMLPulseListElement;
    new (): HTMLPulseListElement;
  };

  interface HTMLPulseListGroupElement extends Components.PulseListGroup, HTMLStencilElement {}
  var HTMLPulseListGroupElement: {
    prototype: HTMLPulseListGroupElement;
    new (): HTMLPulseListGroupElement;
  };

  interface HTMLPulseListItemElement extends Components.PulseListItem, HTMLStencilElement {}
  var HTMLPulseListItemElement: {
    prototype: HTMLPulseListItemElement;
    new (): HTMLPulseListItemElement;
  };

  interface HTMLPulseMobileCalendarElement extends Components.PulseMobileCalendar, HTMLStencilElement {}
  var HTMLPulseMobileCalendarElement: {
    prototype: HTMLPulseMobileCalendarElement;
    new (): HTMLPulseMobileCalendarElement;
  };

  interface HTMLPulseMobileCalendarGroupElement extends Components.PulseMobileCalendarGroup, HTMLStencilElement {}
  var HTMLPulseMobileCalendarGroupElement: {
    prototype: HTMLPulseMobileCalendarGroupElement;
    new (): HTMLPulseMobileCalendarGroupElement;
  };

  interface HTMLPulseMobileDatePickerElement extends Components.PulseMobileDatePicker, HTMLStencilElement {}
  var HTMLPulseMobileDatePickerElement: {
    prototype: HTMLPulseMobileDatePickerElement;
    new (): HTMLPulseMobileDatePickerElement;
  };

  interface HTMLPulseModalElement extends Components.PulseModal, HTMLStencilElement {}
  var HTMLPulseModalElement: {
    prototype: HTMLPulseModalElement;
    new (): HTMLPulseModalElement;
  };

  interface HTMLPulseModalLiteElement extends Components.PulseModalLite, HTMLStencilElement {}
  var HTMLPulseModalLiteElement: {
    prototype: HTMLPulseModalLiteElement;
    new (): HTMLPulseModalLiteElement;
  };

  interface HTMLPulseModaltbElement extends Components.PulseModaltb, HTMLStencilElement {}
  var HTMLPulseModaltbElement: {
    prototype: HTMLPulseModaltbElement;
    new (): HTMLPulseModaltbElement;
  };

  interface HTMLPulseModaltcElement extends Components.PulseModaltc, HTMLStencilElement {}
  var HTMLPulseModaltcElement: {
    prototype: HTMLPulseModaltcElement;
    new (): HTMLPulseModaltcElement;
  };

  interface HTMLPulseNavButtonElement extends Components.PulseNavButton, HTMLStencilElement {}
  var HTMLPulseNavButtonElement: {
    prototype: HTMLPulseNavButtonElement;
    new (): HTMLPulseNavButtonElement;
  };

  interface HTMLPulseOnboardingElement extends Components.PulseOnboarding, HTMLStencilElement {}
  var HTMLPulseOnboardingElement: {
    prototype: HTMLPulseOnboardingElement;
    new (): HTMLPulseOnboardingElement;
  };

  interface HTMLPulseOptionElement extends Components.PulseOption, HTMLStencilElement {}
  var HTMLPulseOptionElement: {
    prototype: HTMLPulseOptionElement;
    new (): HTMLPulseOptionElement;
  };

  interface HTMLPulseOptionMenuElement extends Components.PulseOptionMenu, HTMLStencilElement {}
  var HTMLPulseOptionMenuElement: {
    prototype: HTMLPulseOptionMenuElement;
    new (): HTMLPulseOptionMenuElement;
  };

  interface HTMLPulseOptionMenuControllerElement extends Components.PulseOptionMenuController, HTMLStencilElement {}
  var HTMLPulseOptionMenuControllerElement: {
    prototype: HTMLPulseOptionMenuControllerElement;
    new (): HTMLPulseOptionMenuControllerElement;
  };

  interface HTMLPulseProgressIndicatorElement extends Components.PulseProgressIndicator, HTMLStencilElement {}
  var HTMLPulseProgressIndicatorElement: {
    prototype: HTMLPulseProgressIndicatorElement;
    new (): HTMLPulseProgressIndicatorElement;
  };

  interface HTMLPulseRadioElement extends Components.PulseRadio, HTMLStencilElement {}
  var HTMLPulseRadioElement: {
    prototype: HTMLPulseRadioElement;
    new (): HTMLPulseRadioElement;
  };

  interface HTMLPulseRadioGroupElement extends Components.PulseRadioGroup, HTMLStencilElement {}
  var HTMLPulseRadioGroupElement: {
    prototype: HTMLPulseRadioGroupElement;
    new (): HTMLPulseRadioGroupElement;
  };

  interface HTMLPulseSelectCardElement extends Components.PulseSelectCard, HTMLStencilElement {}
  var HTMLPulseSelectCardElement: {
    prototype: HTMLPulseSelectCardElement;
    new (): HTMLPulseSelectCardElement;
  };

  interface HTMLPulseSelectCardGroupElement extends Components.PulseSelectCardGroup, HTMLStencilElement {}
  var HTMLPulseSelectCardGroupElement: {
    prototype: HTMLPulseSelectCardGroupElement;
    new (): HTMLPulseSelectCardGroupElement;
  };

  interface HTMLPulseSlideElement extends Components.PulseSlide, HTMLStencilElement {}
  var HTMLPulseSlideElement: {
    prototype: HTMLPulseSlideElement;
    new (): HTMLPulseSlideElement;
  };

  interface HTMLPulseSlidesElement extends Components.PulseSlides, HTMLStencilElement {}
  var HTMLPulseSlidesElement: {
    prototype: HTMLPulseSlidesElement;
    new (): HTMLPulseSlidesElement;
  };

  interface HTMLPulseSwitchButtonElement extends Components.PulseSwitchButton, HTMLStencilElement {}
  var HTMLPulseSwitchButtonElement: {
    prototype: HTMLPulseSwitchButtonElement;
    new (): HTMLPulseSwitchButtonElement;
  };

  interface HTMLPulseTabElement extends Components.PulseTab, HTMLStencilElement {}
  var HTMLPulseTabElement: {
    prototype: HTMLPulseTabElement;
    new (): HTMLPulseTabElement;
  };

  interface HTMLPulseTabItemElement extends Components.PulseTabItem, HTMLStencilElement {}
  var HTMLPulseTabItemElement: {
    prototype: HTMLPulseTabItemElement;
    new (): HTMLPulseTabItemElement;
  };

  interface HTMLPulseTabsElement extends Components.PulseTabs, HTMLStencilElement {}
  var HTMLPulseTabsElement: {
    prototype: HTMLPulseTabsElement;
    new (): HTMLPulseTabsElement;
  };

  interface HTMLPulseTabsGroupElement extends Components.PulseTabsGroup, HTMLStencilElement {}
  var HTMLPulseTabsGroupElement: {
    prototype: HTMLPulseTabsGroupElement;
    new (): HTMLPulseTabsGroupElement;
  };

  interface HTMLPulseTagElement extends Components.PulseTag, HTMLStencilElement {}
  var HTMLPulseTagElement: {
    prototype: HTMLPulseTagElement;
    new (): HTMLPulseTagElement;
  };

  interface HTMLPulseTagsGroupElement extends Components.PulseTagsGroup, HTMLStencilElement {}
  var HTMLPulseTagsGroupElement: {
    prototype: HTMLPulseTagsGroupElement;
    new (): HTMLPulseTagsGroupElement;
  };

  interface HTMLPulseToastElement extends Components.PulseToast, HTMLStencilElement {}
  var HTMLPulseToastElement: {
    prototype: HTMLPulseToastElement;
    new (): HTMLPulseToastElement;
  };

  interface HTMLPulseTooltipElement extends Components.PulseTooltip, HTMLStencilElement {}
  var HTMLPulseTooltipElement: {
    prototype: HTMLPulseTooltipElement;
    new (): HTMLPulseTooltipElement;
  };

  interface HTMLPulseTooltipControllerElement extends Components.PulseTooltipController, HTMLStencilElement {}
  var HTMLPulseTooltipControllerElement: {
    prototype: HTMLPulseTooltipControllerElement;
    new (): HTMLPulseTooltipControllerElement;
  };

  interface HTMLPulseTooltipInfoElement extends Components.PulseTooltipInfo, HTMLStencilElement {}
  var HTMLPulseTooltipInfoElement: {
    prototype: HTMLPulseTooltipInfoElement;
    new (): HTMLPulseTooltipInfoElement;
  };

  interface HTMLPulseTooltipInfoControllerElement extends Components.PulseTooltipInfoController, HTMLStencilElement {}
  var HTMLPulseTooltipInfoControllerElement: {
    prototype: HTMLPulseTooltipInfoControllerElement;
    new (): HTMLPulseTooltipInfoControllerElement;
  };

  interface HTMLPulseTransactionElement extends Components.PulseTransaction, HTMLStencilElement {}
  var HTMLPulseTransactionElement: {
    prototype: HTMLPulseTransactionElement;
    new (): HTMLPulseTransactionElement;
  };

  interface HTMLPulseVoucherElement extends Components.PulseVoucher, HTMLStencilElement {}
  var HTMLPulseVoucherElement: {
    prototype: HTMLPulseVoucherElement;
    new (): HTMLPulseVoucherElement;
  };

  interface HTMLPulseVoucherResultElement extends Components.PulseVoucherResult, HTMLStencilElement {}
  var HTMLPulseVoucherResultElement: {
    prototype: HTMLPulseVoucherResultElement;
    new (): HTMLPulseVoucherResultElement;
  };

  interface HTMLPulseVoucherSummaryElement extends Components.PulseVoucherSummary, HTMLStencilElement {}
  var HTMLPulseVoucherSummaryElement: {
    prototype: HTMLPulseVoucherSummaryElement;
    new (): HTMLPulseVoucherSummaryElement;
  };

  interface HTMLPulseVoucherSummaryItemElement extends Components.PulseVoucherSummaryItem, HTMLStencilElement {}
  var HTMLPulseVoucherSummaryItemElement: {
    prototype: HTMLPulseVoucherSummaryItemElement;
    new (): HTMLPulseVoucherSummaryItemElement;
  };
  interface HTMLElementTagNameMap {
    'pulse-avatar': HTMLPulseAvatarElement;
    'pulse-button': HTMLPulseButtonElement;
    'pulse-calendar': HTMLPulseCalendarElement;
    'pulse-card': HTMLPulseCardElement;
    'pulse-card-shortcut-add': HTMLPulseCardShortcutAddElement;
    'pulse-checkbox': HTMLPulseCheckboxElement;
    'pulse-collapsible': HTMLPulseCollapsibleElement;
    'pulse-date-picker': HTMLPulseDatePickerElement;
    'pulse-dropdown': HTMLPulseDropdownElement;
    'pulse-fab-button': HTMLPulseFabButtonElement;
    'pulse-flow-thc': HTMLPulseFlowThcElement;
    'pulse-flowth': HTMLPulseFlowthElement;
    'pulse-flowthc': HTMLPulseFlowthcElement;
    'pulse-flowthcs': HTMLPulseFlowthcsElement;
    'pulse-flowtm': HTMLPulseFlowtmElement;
    'pulse-flowtr': HTMLPulseFlowtrElement;
    'pulse-flowtt': HTMLPulseFlowttElement;
    'pulse-icon': HTMLPulseIconElement;
    'pulse-input': HTMLPulseInputElement;
    'pulse-item': HTMLPulseItemElement;
    'pulse-list': HTMLPulseListElement;
    'pulse-list-group': HTMLPulseListGroupElement;
    'pulse-list-item': HTMLPulseListItemElement;
    'pulse-mobile-calendar': HTMLPulseMobileCalendarElement;
    'pulse-mobile-calendar-group': HTMLPulseMobileCalendarGroupElement;
    'pulse-mobile-date-picker': HTMLPulseMobileDatePickerElement;
    'pulse-modal': HTMLPulseModalElement;
    'pulse-modal-lite': HTMLPulseModalLiteElement;
    'pulse-modaltb': HTMLPulseModaltbElement;
    'pulse-modaltc': HTMLPulseModaltcElement;
    'pulse-nav-button': HTMLPulseNavButtonElement;
    'pulse-onboarding': HTMLPulseOnboardingElement;
    'pulse-option': HTMLPulseOptionElement;
    'pulse-option-menu': HTMLPulseOptionMenuElement;
    'pulse-option-menu-controller': HTMLPulseOptionMenuControllerElement;
    'pulse-progress-indicator': HTMLPulseProgressIndicatorElement;
    'pulse-radio': HTMLPulseRadioElement;
    'pulse-radio-group': HTMLPulseRadioGroupElement;
    'pulse-select-card': HTMLPulseSelectCardElement;
    'pulse-select-card-group': HTMLPulseSelectCardGroupElement;
    'pulse-slide': HTMLPulseSlideElement;
    'pulse-slides': HTMLPulseSlidesElement;
    'pulse-switch-button': HTMLPulseSwitchButtonElement;
    'pulse-tab': HTMLPulseTabElement;
    'pulse-tab-item': HTMLPulseTabItemElement;
    'pulse-tabs': HTMLPulseTabsElement;
    'pulse-tabs-group': HTMLPulseTabsGroupElement;
    'pulse-tag': HTMLPulseTagElement;
    'pulse-tags-group': HTMLPulseTagsGroupElement;
    'pulse-toast': HTMLPulseToastElement;
    'pulse-tooltip': HTMLPulseTooltipElement;
    'pulse-tooltip-controller': HTMLPulseTooltipControllerElement;
    'pulse-tooltip-info': HTMLPulseTooltipInfoElement;
    'pulse-tooltip-info-controller': HTMLPulseTooltipInfoControllerElement;
    'pulse-transaction': HTMLPulseTransactionElement;
    'pulse-voucher': HTMLPulseVoucherElement;
    'pulse-voucher-result': HTMLPulseVoucherResultElement;
    'pulse-voucher-summary': HTMLPulseVoucherSummaryElement;
    'pulse-voucher-summary-item': HTMLPulseVoucherSummaryItemElement;
  }
}

declare namespace LocalJSX {
  interface PulseAvatar {
    'avatartype'?: AvatarType;
    'borderdashed'?: boolean;
    'color'?: Color;
    'colorvariant'?: ColorVariant;
    'icon'?: string;
    'iconcolor'?: Color;
    'iconcolorvariant'?: ColorVariant;
    'logo'?: LogoTypes;
    'name'?: string;
    'size'?: Size;
    'text'?: string;
    'url'?: string;
  }
  interface PulseButton {
    'block'?: boolean;
    'color'?: Color;
    'colorgradient'?: boolean;
    'colorvariant'?: ColorVariant;
    'disabled'?: boolean;
    'fill'?: Fill;
    'icon'?: string;
    'iconColor'?: Color;
    'iconColorVariant'?: ColorVariant;
    'iconPosition'?: 'left' | 'right';
    'onPulseBlur'?: (event: CustomEvent<any>) => void;
    'onPulseFocus'?: (event: CustomEvent<any>) => void;
    'pulseButtonSize'?: 'default' | 'small';
    'pulseButtonType'?: 'primary' | 'secondary' | 'tertiary';
    'type'?: 'submit' | 'reset' | 'button';
  }
  interface PulseCalendar {
    'color'?: Color;
    'maxDate'?: Date;
    'minDate'?: Date;
    'onCalendarChange'?: (event: CustomEvent<Array<Date>>) => void;
    'range'?: boolean;
    'value'?: Array<Date>;
  }
  interface PulseCard {
    'color'?: Color;
    'colorgradient'?: boolean;
    'colorvariant'?: ColorVariant;
    'elevation'?: Elevation;
    'elevationhover'?: Elevation;
  }
  interface PulseCardShortcutAdd {
    'mode'?: Mode;
    'onCardClicked'?: (event: CustomEvent<any>) => void;
    'text'?: string;
  }
  interface PulseCheckbox {
    'checked'?: boolean;
    'color'?: Color;
    'colorgradient'?: boolean;
    'colorvariant'?: ColorVariant;
    'disabled'?: boolean;
    'name'?: string;
    'onValueEmmit'?: (event: CustomEvent<boolean>) => void;
    'value'?: string;
  }
  interface PulseCollapsible {
    'carousel'?: boolean;
    'description'?: string;
    'disabled'?: boolean;
    'name'?: string;
    'onPulseCollapsibleOpen'?: (event: CustomEvent<boolean>) => void;
    'scrollsize'?: number;
    'separator'?: boolean;
    'tagcolor'?: Color;
    'tagcolorvariant'?: ColorVariant;
    'tagtext'?: string;
  }
  interface PulseDatePicker {
    'color'?: Color;
    'disabled'?: boolean;
    'endlabel'?: string;
    'maxDate'?: Date;
    'minDate'?: Date;
    'onDatePickerChange'?: (event: CustomEvent<Array<Date>>) => void;
    'range'?: boolean;
    'startlabel'?: string;
    'value': Array<Date>;
  }
  interface PulseDropdown {
    'disabled'?: boolean;
    'ellipsis'?: boolean;
    'insideelement'?: boolean;
    'label'?: string;
    'name'?: string;
    'onPulseChange'?: (event: CustomEvent<any>) => void;
    'placeholder'?: string;
    'text'?: string;
    'value'?: string;
  }
  interface PulseFabButton {
    'color'?: Color;
    'colorgradient'?: boolean;
    'colorvariant'?: ColorVariant;
    'disabled'?: boolean;
    'onFabButtonDidLoad'?: (event: CustomEvent<any>) => void;
    'onPulseBlur'?: (event: CustomEvent<any>) => void;
    'onPulseFocus'?: (event: CustomEvent<any>) => void;
    'text'?: string;
    'textposition'?: 'bottom' | 'right';
    'type'?: 'submit' | 'reset' | 'button';
  }
  interface PulseFlowThc {}
  interface PulseFlowth {
    'elevation'?: Elevation;
    'showLeft'?: boolean;
    'showRight'?: boolean;
  }
  interface PulseFlowthc {}
  interface PulseFlowthcs {
    'lgcontentsize'?: number;
  }
  interface PulseFlowtm {}
  interface PulseFlowtr {}
  interface PulseFlowtt {}
  interface PulseIcon {
    'color'?: Color;
    'colorvariant'?: ColorVariant;
    'icon'?: string;
    'name'?: string;
    'size'?: Size;
  }
  interface PulseInput {
    'actionableicon'?: boolean;
    'autocomplete'?: 'on' | 'off';
    'autofocus'?: boolean;
    'blocked'?: boolean;
    'disabled'?: boolean;
    'hasdecimals'?: boolean;
    'icon'?: string;
    'iconcolor'?: Color;
    'iconcolorvariant'?: ColorVariant;
    'inputmode'?: string;
    'inputtextalign'?: TextAlign;
    'label'?: string;
    'labelerror'?: string;
    'lefticon'?: boolean;
    'max'?: string;
    'maxlength'?: number;
    'min'?: string;
    'minlength'?: number;
    'name'?: string;
    'onIconClick'?: (event: CustomEvent<any>) => void;
    'onInputBlur'?: (event: CustomEvent<void>) => void;
    'onInputClick'?: (event: CustomEvent<any>) => void;
    'onInputFocus'?: (event: CustomEvent<any>) => void;
    'onInputKeyDown'?: (event: CustomEvent<any>) => void;
    'onInputKeyUp'?: (event: CustomEvent<any>) => void;
    'onIonInputDidUnload'?: (event: CustomEvent<void>) => void;
    'onKeyBoardInput'?: (event: CustomEvent<KeyboardEvent>) => void;
    'onPulseInputDidLoad'?: (event: CustomEvent<void>) => void;
    'onValueEmmitInput'?: (event: CustomEvent<string>) => void;
    'optional'?: boolean;
    'pattern'?: string;
    'placeholder'?: string;
    'readonly'?: boolean;
    'required'?: boolean;
    'spellcheck'?: boolean;
    'state'?: StateInput;
    'step'?: string;
    'type'?: TextFieldTypes;
    'value'?: string | null;
  }
  interface PulseItem {
    'alwaysDescription'?: boolean;
    'description'?: string | string[];
    'fullContentDesktop'?: boolean;
    'fullContentMobile'?: boolean;
    'fullContentTablet'?: boolean;
    'hasExpand'?: boolean;
    'lines'?: boolean;
    'onExpand'?: (event: CustomEvent<any>) => void;
    'onReduceAllItems'?: (event: CustomEvent<any>) => void;
    'onReduceExpand'?: (event: CustomEvent<any>) => void;
    'openExpand'?: boolean;
  }
  interface PulseList {}
  interface PulseListGroup {
    'isaccordion'?: boolean;
    'islitedesign'?: boolean;
    'onItemChanged'?: (event: CustomEvent<string>) => void;
    'showheader'?: boolean;
  }
  interface PulseListItem {
    'additionalsubtitle'?: string;
    'additionalsubtitledesc'?: string;
    'avataraligncenter'?: boolean;
    'avatarpath'?: string;
    'avatartype'?: AvatarType;
    'description'?: string;
    'descriptionexpanded'?: string;
    'fillnavbuttton'?: 'clear' | 'solid';
    'isdisabled'?: boolean;
    'isexpanded'?: boolean;
    'isexpandible'?: boolean;
    'itemid'?: string;
    'itemtitle'?: string;
    'onItemClicked'?: (event: CustomEvent<boolean>) => void;
    'onSecondaryActionClicked'?: (event: CustomEvent<HTMLElement>) => void;
    'primarynavicon'?: string;
    'primarynaviconcolor'?: Color;
    'secondaryicon'?: string;
    'secondaryiconcolor'?: Color;
    'showdivisor'?: boolean;
    'subtitle'?: string;
    'subtitledesc'?: string;
    'tagcolor'?: Color;
    'tagtext'?: string;
  }
  interface PulseMobileCalendar {
    'color'?: Color;
    'currentDate': Date;
    'maxdate'?: Date;
    'mindate'?: Date;
    'onDateSelected'?: (event: CustomEvent<Date>) => void;
    'selecteddays'?: Array<Date>;
    'showmonthtitle'?: boolean;
  }
  interface PulseMobileCalendarGroup {
    'color'?: Color;
    'height'?: string;
    'maxdate'?: Date;
    'mindate'?: Date;
    'monthsrenderrange'?: number;
    'onConfirmSelection'?: (event: CustomEvent<Array<Date>>) => void;
    'range'?: boolean;
    'value'?: Array<Date>;
  }
  interface PulseMobileDatePicker {
    'color'?: Color;
    'endlabel'?: string;
    'maxdate'?: Date;
    'mindate'?: Date;
    'monthsrenderrange'?: number;
    'onConfirmSelection'?: (event: CustomEvent<Array<Date>>) => void;
    'onGoBack'?: (event: CustomEvent<any>) => void;
    'range'?: boolean;
    'startlabel'?: string;
  }
  interface PulseModal {
    'component': any;
    'componentProps'?: any;
    'delegate'?: any;
    'onWillDismiss'?: (event: CustomEvent<any>) => void;
    'size'?: SizeModal;
  }
  interface PulseModalLite {
    'onWillDismiss'?: (event: CustomEvent<any>) => void;
    'size'?: SizeModal;
  }
  interface PulseModaltb {}
  interface PulseModaltc {
    'title': string;
  }
  interface PulseNavButton {
    'disabled'?: boolean;
    'fill'?: 'clear' | 'solid';
    'icon'?: string;
    'iconPosition'?: 'left' | 'right';
    'iconcolor'?: Color;
    'onPulseBlur'?: (event: CustomEvent<any>) => void;
    'onPulseFocus'?: (event: CustomEvent<any>) => void;
    'onlyIconDevice'?: GridBreakpoints | GridBreakpoints[] | string;
  }
  interface PulseOnboarding {
    'data'?: Array<PulseOnBoardingItem>;
    /**
    * The state of the last slide. For more information, see [theming](https://pulseio.design).
    */
    'onShowButtonEvent'?: (event: CustomEvent<boolean>) => void;
  }
  interface PulseOption {
    'color'?: Color;
    'colorvariant'?: ColorVariant;
    'disabled'?: boolean;
    'icon'?: string;
    'name'?: string;
    'onOptionDidLoad'?: (event: CustomEvent<void>) => void;
    'onOptionOnClick'?: (event: CustomEvent<string>) => void;
    'showIcon'?: boolean;
    'value'?: string;
  }
  interface PulseOptionMenu {
    'data'?: any[];
    'height'?: string;
    'htmlelementref'?: HTMLElement;
    'name'?: string;
    'onPresentEnd'?: (event: CustomEvent<string>) => void;
    'onValueChanged'?: (event: CustomEvent<any>) => void;
    'orientation'?: Position;
    'show'?: boolean;
    'size'?: Size;
    'value'?: any;
  }
  interface PulseOptionMenuController {
    'onCloseChange'?: (event: CustomEvent<string>) => void;
  }
  interface PulseProgressIndicator {
    'color'?: Color;
    'colorvariant'?: ColorVariant;
    'stepactive'?: number;
    'steps'?: number;
  }
  interface PulseRadio {
    'checked'?: boolean;
    'color'?: Color;
    'colorgradient'?: boolean;
    'colorvariant'?: ColorVariant;
    'disabled'?: boolean;
    'label'?: string;
    'name'?: string;
    /**
    * Emitted when the radio button is selected.
    */
    'onRadioSelect'?: (event: CustomEvent<any>) => void;
    'onValueEmmit'?: (event: CustomEvent<boolean>) => void;
    'value'?: any | null;
  }
  interface PulseRadioGroup {
    /**
    * If `true`, the radios can be deselected.
    */
    'allowEmptySelection'?: boolean;
    /**
    * The name of the control, which is submitted with the form data.
    */
    'name'?: string;
    /**
    * Emitted when the value has changed.
    */
    'onRadioChange'?: (event: CustomEvent<any>) => void;
    /**
    * the value of the radio group.
    */
    'value'?: any | null;
  }
  interface PulseSelectCard {
    'disabled'?: boolean;
    /**
    * Emitted when the select card is selected.
    */
    'onSCardSelect'?: (event: CustomEvent<any>) => void;
    'selected'?: boolean;
    'switchtype'?: SwitchType;
    'value'?: any | null;
  }
  interface PulseSelectCardGroup {
    'allowEmptySelection'?: boolean;
    'groupstyle'?: CardStyles;
    'onCardChange'?: (event: CustomEvent<any>) => void;
    'onPulseScroll'?: (event: CustomEvent<any>) => void;
    'onPulseScrollEnd'?: (event: CustomEvent<any>) => void;
    'onPulseScrollZero'?: (event: CustomEvent<any>) => void;
    'position'?: any;
    'value'?: any | null;
  }
  interface PulseSlide {}
  interface PulseSlides {
    /**
    * The color to use from your application's color palette to base. For more information on colors, see [theming](https://pulseio.design).
    */
    'color'?: Color;
    /**
    * The color hue to use from your application's based in colors. For more information on colors, see [theming](https://pulseio.design).
    */
    'colorvariant'?: ColorVariant;
    'onChangeIndicator'?: (event: CustomEvent<any>) => void;
    /**
    * Emmit event to client when change slide. return new position
    */
    'onChangeSlide'?: (event: CustomEvent<number>) => void;
  }
  interface PulseSwitchButton {
    'color'?: Color;
    'colorgradient'?: boolean;
    'colorvariant'?: ColorVariant;
    'inputstate'?: boolean;
    'onSwitchChange'?: (event: CustomEvent<boolean>) => void;
  }
  interface PulseTab {
    'color'?: Color;
    'colorgradient'?: boolean;
    'colorvariant'?: ColorVariant;
    'disabled'?: boolean;
    /**
    * Emitted when the select card is selected.
    */
    'onTabSelect'?: (event: CustomEvent<any>) => void;
    'selected'?: boolean;
    'tabtext'?: string;
    'value'?: any | null;
  }
  interface PulseTabItem {
    'disabled'?: boolean;
    'tabtext'?: string;
  }
  interface PulseTabs {
    'allowEmptySelection'?: boolean;
    'onTabChange'?: (event: CustomEvent<any>) => void;
    'value'?: any | null;
  }
  interface PulseTabsGroup {
    'intrinsic'?: boolean;
  }
  interface PulseTag {
    'closeable'?: boolean;
    'color'?: Color;
    'colorvariant'?: ColorVariant;
    'disabled'?: boolean;
    'fill'?: Fill;
    'maxwidth'?: number;
    'onCloseClick'?: (event: CustomEvent<any>) => void;
    'size'?: Size;
    'skeleton'?: boolean;
    'stayalways'?: boolean;
    'text'?: string;
  }
  interface PulseTagsGroup {
    'closeable'?: boolean;
    'color'?: Color;
    'colorvariant'?: ColorVariant;
    'fill'?: Fill;
    'onCloseTag'?: (event: CustomEvent<any>) => void;
    'size'?: Size;
    'tagdata'?: TagData[];
    'text'?: string;
  }
  interface PulseToast {
    'closeable'?: boolean;
    'color'?: Color;
    'colorvariant'?: ColorVariant;
    'elevation'?: Elevation;
    'image'?: string;
    'onToastClosed'?: (event: CustomEvent<any>) => void;
    'text'?: string;
    'time'?: number;
  }
  interface PulseTooltip {
    'color'?: Color;
    'colorgradient'?: boolean;
    'colorvariant'?: ColorVariant;
    'description'?: string;
    'elevation'?: Elevation;
    'mobileView'?: boolean;
    'objectdest'?: string;
    'objectdesthtml'?: HTMLElement;
    'onOnCloseChange'?: (event: CustomEvent<string>) => void;
    'onPresentEnd'?: (event: CustomEvent<string>) => void;
    'position'?: Position;
    'size'?: Size;
    'tiptitle'?: string;
  }
  interface PulseTooltipController {
    'onOnCloseChange'?: (event: CustomEvent<string>) => void;
  }
  interface PulseTooltipInfo {
    'color'?: Color;
    'colorvariant'?: ColorVariant;
    'content'?: Array<PulseTooltipInfoData>;
    'dynamicposition'?: boolean;
    'htmlelementref'?: HTMLElement;
    'mobilebehavior'?: boolean;
    'onOnCloseChange'?: (event: CustomEvent<string>) => void;
    'onPresentEnd'?: (event: CustomEvent<string>) => void;
    'orientation'?: Position;
    'removeinclose'?: boolean;
    'size'?: Size;
  }
  interface PulseTooltipInfoController {
    'onOnCloseChange'?: (event: CustomEvent<string>) => void;
  }
  interface PulseTransaction {
    'onMailactionclicked'?: (event: CustomEvent<any>) => void;
    'onMainactionclicked'?: (event: CustomEvent<any>) => void;
    'onSecondaryactionclicked'?: (event: CustomEvent<any>) => void;
    'voucherdata': VoucherModel;
  }
  interface PulseVoucher {}
  interface PulseVoucherResult {
    'onMailclicked'?: (event: CustomEvent<any>) => void;
    'onMainclicked'?: (event: CustomEvent<any>) => void;
    'onSecondaryclicked'?: (event: CustomEvent<any>) => void;
    'state'?: VoucherState;
    'voucherControls': VoucherControls;
    'voucherHeader': VoucherHeader;
  }
  interface PulseVoucherSummary {
    'onMailclicked'?: (event: CustomEvent<any>) => void;
    'onMainclicked'?: (event: CustomEvent<any>) => void;
    'onSecondaryclicked'?: (event: CustomEvent<any>) => void;
    'state'?: VoucherState;
    'voucherBody': VoucherBody;
    'voucherControls': VoucherControls;
  }
  interface PulseVoucherSummaryItem {
    'hideborder'?: boolean;
    'state'?: VoucherState;
    'titlename': string;
  }

  interface IntrinsicElements {
    'pulse-avatar': PulseAvatar;
    'pulse-button': PulseButton;
    'pulse-calendar': PulseCalendar;
    'pulse-card': PulseCard;
    'pulse-card-shortcut-add': PulseCardShortcutAdd;
    'pulse-checkbox': PulseCheckbox;
    'pulse-collapsible': PulseCollapsible;
    'pulse-date-picker': PulseDatePicker;
    'pulse-dropdown': PulseDropdown;
    'pulse-fab-button': PulseFabButton;
    'pulse-flow-thc': PulseFlowThc;
    'pulse-flowth': PulseFlowth;
    'pulse-flowthc': PulseFlowthc;
    'pulse-flowthcs': PulseFlowthcs;
    'pulse-flowtm': PulseFlowtm;
    'pulse-flowtr': PulseFlowtr;
    'pulse-flowtt': PulseFlowtt;
    'pulse-icon': PulseIcon;
    'pulse-input': PulseInput;
    'pulse-item': PulseItem;
    'pulse-list': PulseList;
    'pulse-list-group': PulseListGroup;
    'pulse-list-item': PulseListItem;
    'pulse-mobile-calendar': PulseMobileCalendar;
    'pulse-mobile-calendar-group': PulseMobileCalendarGroup;
    'pulse-mobile-date-picker': PulseMobileDatePicker;
    'pulse-modal': PulseModal;
    'pulse-modal-lite': PulseModalLite;
    'pulse-modaltb': PulseModaltb;
    'pulse-modaltc': PulseModaltc;
    'pulse-nav-button': PulseNavButton;
    'pulse-onboarding': PulseOnboarding;
    'pulse-option': PulseOption;
    'pulse-option-menu': PulseOptionMenu;
    'pulse-option-menu-controller': PulseOptionMenuController;
    'pulse-progress-indicator': PulseProgressIndicator;
    'pulse-radio': PulseRadio;
    'pulse-radio-group': PulseRadioGroup;
    'pulse-select-card': PulseSelectCard;
    'pulse-select-card-group': PulseSelectCardGroup;
    'pulse-slide': PulseSlide;
    'pulse-slides': PulseSlides;
    'pulse-switch-button': PulseSwitchButton;
    'pulse-tab': PulseTab;
    'pulse-tab-item': PulseTabItem;
    'pulse-tabs': PulseTabs;
    'pulse-tabs-group': PulseTabsGroup;
    'pulse-tag': PulseTag;
    'pulse-tags-group': PulseTagsGroup;
    'pulse-toast': PulseToast;
    'pulse-tooltip': PulseTooltip;
    'pulse-tooltip-controller': PulseTooltipController;
    'pulse-tooltip-info': PulseTooltipInfo;
    'pulse-tooltip-info-controller': PulseTooltipInfoController;
    'pulse-transaction': PulseTransaction;
    'pulse-voucher': PulseVoucher;
    'pulse-voucher-result': PulseVoucherResult;
    'pulse-voucher-summary': PulseVoucherSummary;
    'pulse-voucher-summary-item': PulseVoucherSummaryItem;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'pulse-avatar': LocalJSX.PulseAvatar & JSXBase.HTMLAttributes<HTMLPulseAvatarElement>;
      'pulse-button': LocalJSX.PulseButton & JSXBase.HTMLAttributes<HTMLPulseButtonElement>;
      'pulse-calendar': LocalJSX.PulseCalendar & JSXBase.HTMLAttributes<HTMLPulseCalendarElement>;
      'pulse-card': LocalJSX.PulseCard & JSXBase.HTMLAttributes<HTMLPulseCardElement>;
      'pulse-card-shortcut-add': LocalJSX.PulseCardShortcutAdd & JSXBase.HTMLAttributes<HTMLPulseCardShortcutAddElement>;
      'pulse-checkbox': LocalJSX.PulseCheckbox & JSXBase.HTMLAttributes<HTMLPulseCheckboxElement>;
      'pulse-collapsible': LocalJSX.PulseCollapsible & JSXBase.HTMLAttributes<HTMLPulseCollapsibleElement>;
      'pulse-date-picker': LocalJSX.PulseDatePicker & JSXBase.HTMLAttributes<HTMLPulseDatePickerElement>;
      'pulse-dropdown': LocalJSX.PulseDropdown & JSXBase.HTMLAttributes<HTMLPulseDropdownElement>;
      'pulse-fab-button': LocalJSX.PulseFabButton & JSXBase.HTMLAttributes<HTMLPulseFabButtonElement>;
      'pulse-flow-thc': LocalJSX.PulseFlowThc & JSXBase.HTMLAttributes<HTMLPulseFlowThcElement>;
      'pulse-flowth': LocalJSX.PulseFlowth & JSXBase.HTMLAttributes<HTMLPulseFlowthElement>;
      'pulse-flowthc': LocalJSX.PulseFlowthc & JSXBase.HTMLAttributes<HTMLPulseFlowthcElement>;
      'pulse-flowthcs': LocalJSX.PulseFlowthcs & JSXBase.HTMLAttributes<HTMLPulseFlowthcsElement>;
      'pulse-flowtm': LocalJSX.PulseFlowtm & JSXBase.HTMLAttributes<HTMLPulseFlowtmElement>;
      'pulse-flowtr': LocalJSX.PulseFlowtr & JSXBase.HTMLAttributes<HTMLPulseFlowtrElement>;
      'pulse-flowtt': LocalJSX.PulseFlowtt & JSXBase.HTMLAttributes<HTMLPulseFlowttElement>;
      'pulse-icon': LocalJSX.PulseIcon & JSXBase.HTMLAttributes<HTMLPulseIconElement>;
      'pulse-input': LocalJSX.PulseInput & JSXBase.HTMLAttributes<HTMLPulseInputElement>;
      'pulse-item': LocalJSX.PulseItem & JSXBase.HTMLAttributes<HTMLPulseItemElement>;
      'pulse-list': LocalJSX.PulseList & JSXBase.HTMLAttributes<HTMLPulseListElement>;
      'pulse-list-group': LocalJSX.PulseListGroup & JSXBase.HTMLAttributes<HTMLPulseListGroupElement>;
      'pulse-list-item': LocalJSX.PulseListItem & JSXBase.HTMLAttributes<HTMLPulseListItemElement>;
      'pulse-mobile-calendar': LocalJSX.PulseMobileCalendar & JSXBase.HTMLAttributes<HTMLPulseMobileCalendarElement>;
      'pulse-mobile-calendar-group': LocalJSX.PulseMobileCalendarGroup & JSXBase.HTMLAttributes<HTMLPulseMobileCalendarGroupElement>;
      'pulse-mobile-date-picker': LocalJSX.PulseMobileDatePicker & JSXBase.HTMLAttributes<HTMLPulseMobileDatePickerElement>;
      'pulse-modal': LocalJSX.PulseModal & JSXBase.HTMLAttributes<HTMLPulseModalElement>;
      'pulse-modal-lite': LocalJSX.PulseModalLite & JSXBase.HTMLAttributes<HTMLPulseModalLiteElement>;
      'pulse-modaltb': LocalJSX.PulseModaltb & JSXBase.HTMLAttributes<HTMLPulseModaltbElement>;
      'pulse-modaltc': LocalJSX.PulseModaltc & JSXBase.HTMLAttributes<HTMLPulseModaltcElement>;
      'pulse-nav-button': LocalJSX.PulseNavButton & JSXBase.HTMLAttributes<HTMLPulseNavButtonElement>;
      'pulse-onboarding': LocalJSX.PulseOnboarding & JSXBase.HTMLAttributes<HTMLPulseOnboardingElement>;
      'pulse-option': LocalJSX.PulseOption & JSXBase.HTMLAttributes<HTMLPulseOptionElement>;
      'pulse-option-menu': LocalJSX.PulseOptionMenu & JSXBase.HTMLAttributes<HTMLPulseOptionMenuElement>;
      'pulse-option-menu-controller': LocalJSX.PulseOptionMenuController & JSXBase.HTMLAttributes<HTMLPulseOptionMenuControllerElement>;
      'pulse-progress-indicator': LocalJSX.PulseProgressIndicator & JSXBase.HTMLAttributes<HTMLPulseProgressIndicatorElement>;
      'pulse-radio': LocalJSX.PulseRadio & JSXBase.HTMLAttributes<HTMLPulseRadioElement>;
      'pulse-radio-group': LocalJSX.PulseRadioGroup & JSXBase.HTMLAttributes<HTMLPulseRadioGroupElement>;
      'pulse-select-card': LocalJSX.PulseSelectCard & JSXBase.HTMLAttributes<HTMLPulseSelectCardElement>;
      'pulse-select-card-group': LocalJSX.PulseSelectCardGroup & JSXBase.HTMLAttributes<HTMLPulseSelectCardGroupElement>;
      'pulse-slide': LocalJSX.PulseSlide & JSXBase.HTMLAttributes<HTMLPulseSlideElement>;
      'pulse-slides': LocalJSX.PulseSlides & JSXBase.HTMLAttributes<HTMLPulseSlidesElement>;
      'pulse-switch-button': LocalJSX.PulseSwitchButton & JSXBase.HTMLAttributes<HTMLPulseSwitchButtonElement>;
      'pulse-tab': LocalJSX.PulseTab & JSXBase.HTMLAttributes<HTMLPulseTabElement>;
      'pulse-tab-item': LocalJSX.PulseTabItem & JSXBase.HTMLAttributes<HTMLPulseTabItemElement>;
      'pulse-tabs': LocalJSX.PulseTabs & JSXBase.HTMLAttributes<HTMLPulseTabsElement>;
      'pulse-tabs-group': LocalJSX.PulseTabsGroup & JSXBase.HTMLAttributes<HTMLPulseTabsGroupElement>;
      'pulse-tag': LocalJSX.PulseTag & JSXBase.HTMLAttributes<HTMLPulseTagElement>;
      'pulse-tags-group': LocalJSX.PulseTagsGroup & JSXBase.HTMLAttributes<HTMLPulseTagsGroupElement>;
      'pulse-toast': LocalJSX.PulseToast & JSXBase.HTMLAttributes<HTMLPulseToastElement>;
      'pulse-tooltip': LocalJSX.PulseTooltip & JSXBase.HTMLAttributes<HTMLPulseTooltipElement>;
      'pulse-tooltip-controller': LocalJSX.PulseTooltipController & JSXBase.HTMLAttributes<HTMLPulseTooltipControllerElement>;
      'pulse-tooltip-info': LocalJSX.PulseTooltipInfo & JSXBase.HTMLAttributes<HTMLPulseTooltipInfoElement>;
      'pulse-tooltip-info-controller': LocalJSX.PulseTooltipInfoController & JSXBase.HTMLAttributes<HTMLPulseTooltipInfoControllerElement>;
      'pulse-transaction': LocalJSX.PulseTransaction & JSXBase.HTMLAttributes<HTMLPulseTransactionElement>;
      'pulse-voucher': LocalJSX.PulseVoucher & JSXBase.HTMLAttributes<HTMLPulseVoucherElement>;
      'pulse-voucher-result': LocalJSX.PulseVoucherResult & JSXBase.HTMLAttributes<HTMLPulseVoucherResultElement>;
      'pulse-voucher-summary': LocalJSX.PulseVoucherSummary & JSXBase.HTMLAttributes<HTMLPulseVoucherSummaryElement>;
      'pulse-voucher-summary-item': LocalJSX.PulseVoucherSummaryItem & JSXBase.HTMLAttributes<HTMLPulseVoucherSummaryItemElement>;
    }
  }
}


